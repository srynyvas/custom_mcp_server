# MCP Server configuration for local FastAPI service
name: "Local FastAPI MCP Server"
version: "1.0.0"
base_url: "http://localhost:8000"

global_headers:
  User-Agent: "MCP-API-Server/1.0.0"
  Content-Type: "application/json"

endpoints:
  # Basic GET endpoint
  - name: "health_check"
    description: "Check if the API service is healthy"
    method: "GET"
    url: "/health"
    parameters: {}

  # GET with query parameters
  - name: "get_users"
    description: "Get list of users with optional filtering"
    method: "GET"
    url: "/users"
    query_params:
      - "limit"
      - "role"
    parameters:
      limit:
        type: "integer"
        description: "Maximum number of users to return (default: 10)"
        required: false
        minimum: 1
        maximum: 100
      role:
        type: "string"
        description: "Filter users by role (admin, user)"
        required: false

  # GET with path parameter
  - name: "get_user_by_id"
    description: "Get specific user by ID"
    method: "GET"
    url: "/users/{user_id}"
    path_params:
      - "user_id"
    parameters:
      user_id:
        type: "string"
        description: "User ID to retrieve (1, 2, or 3)"
        required: true

  # POST with JSON body
  - name: "create_user"
    description: "Create a new user"
    method: "POST"
    url: "/users"
    body_template: |
      {
        "name": "{name}",
        "email": "{email}",
        "role": "{role}"
      }
    parameters:
      name:
        type: "string"
        description: "User's full name"
        required: true
      email:
        type: "string"
        description: "User's email address"
        required: true
      role:
        type: "string"
        description: "User's role (admin or user)"
        required: false

  # PUT with path parameter and body
  - name: "update_user"
    description: "Update an existing user"
    method: "PUT"
    url: "/users/{user_id}"
    path_params:
      - "user_id"
    body_template: |
      {
        "name": "{name}",
        "email": "{email}",
        "role": "{role}"
      }
    parameters:
      user_id:
        type: "string"
        description: "User ID to update"
        required: true
      name:
        type: "string"
        description: "User's full name"
        required: true
      email:
        type: "string"
        description: "User's email address"
        required: true
      role:
        type: "string"
        description: "User's role"
        required: false

  # DELETE endpoint
  - name: "delete_user"
    description: "Delete a user by ID"
    method: "DELETE"
    url: "/users/{user_id}"
    path_params:
      - "user_id"
    parameters:
      user_id:
        type: "string"
        description: "User ID to delete"
        required: true

  # GET posts with filtering
  - name: "get_posts"
    description: "Get list of posts with optional filtering"
    method: "GET"
    url: "/posts"
    query_params:
      - "author_id"
      - "limit"
    parameters:
      author_id:
        type: "string"
        description: "Filter posts by author ID"
        required: false
      limit:
        type: "integer"
        description: "Maximum number of posts to return"
        required: false

  # POST with complex data
  - name: "create_post"
    description: "Create a new blog post"
    method: "POST"
    url: "/posts"
    body_template: |
      {
        "title": "{title}",
        "content": "{content}",
        "author_id": "{author_id}"
      }
    parameters:
      title:
        type: "string"
        description: "Post title"
        required: true
      content:
        type: "string"
        description: "Post content"
        required: true
      author_id:
        type: "string"
        description: "Author's user ID"
        required: true

  # Echo endpoint for testing POST data
  - name: "echo_data"
    description: "Echo back any JSON data (useful for testing)"
    method: "POST"
    url: "/echo"
    body_template: |
      {
        "message": "{message}",
        "data": "{data}",
        "timestamp": "{timestamp}"
      }
    parameters:
      message:
        type: "string"
        description: "Test message"
        required: true
      data:
        type: "string"
        description: "Any test data"
        required: false
      timestamp:
        type: "string"
        description: "Timestamp (optional)"
        required: false

  # Bearer token authentication
  - name: "get_secure_profile"
    description: "Get user profile (requires Bearer token authentication)"
    method: "GET"
    url: "/secure/profile"
    auth_type: "bearer"
    auth_config:
      token: "test-token-123"
    parameters: {}

  # API key authentication
  - name: "get_protected_data"
    description: "Get protected data (requires API key authentication)"
    method: "GET"
    url: "/api/protected"
    auth_type: "api_key"
    auth_config:
      header: "X-API-Key"
      key: "test-api-key-456"
    parameters: {}

  # Complex search endpoint with multiple parameters
  - name: "search_data"
    description: "Search data with complex filtering and pagination"
    method: "GET"
    url: "/api/search"
    query_params:
      - "query"
      - "category"
      - "page"
      - "per_page"
      - "sort_by"
      - "sort_order"
    parameters:
      query:
        type: "string"
        description: "Search query string"
        required: true
      category:
        type: "string"
        description: "Category to filter by"
        required: false
      page:
        type: "integer"
        description: "Page number for pagination"
        required: false
        minimum: 1
      per_page:
        type: "integer"
        description: "Number of results per page"
        required: false
        minimum: 1
        maximum: 100
      sort_by:
        type: "string"
        description: "Field to sort by"
        required: false
      sort_order:
        type: "string"
        description: "Sort order (asc or desc)"
        required: false

  # Get system status with optional stats
  - name: "get_system_status"
    description: "Get system status with optional statistics"
    method: "GET"
    url: "/status"
    query_params:
      - "include_stats"
      - "format"
    parameters:
      include_stats:
        type: "boolean"
        description: "Include system statistics in response"
        required: false
      format:
        type: "string"
        description: "Response format (json or xml)"
        required: false

  # Webhook endpoint for testing complex POST data
  - name: "test_webhook"
    description: "Test webhook endpoint with complex JSON payload"
    method: "POST"
    url: "/test/webhook"
    body_template: |
      {
        "event": "{event}",
        "payload": {
          "id": "{payload_id}",
          "data": "{payload_data}",
          "metadata": {
            "source": "{source}",
            "version": "{version}"
          }
        }
      }
    parameters:
      event:
        type: "string"
        description: "Event type"
        required: true
      payload_id:
        type: "string"
        description: "Payload identifier"
        required: true
      payload_data:
        type: "string"
        description: "Payload data"
        required: false
      source:
        type: "string"
        description: "Event source"
        required: false
      version:
        type: "string"
        description: "Payload version"
        required: false
